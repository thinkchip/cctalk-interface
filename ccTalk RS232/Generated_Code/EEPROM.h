/* ###################################################################
**     THIS COMPONENT MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename    : EEPROM.h
**     Project     : ccTalk RS232
**     Processor   : MC9S08PA16VLC
**     Component   : IntEEPROM
**     Version     : Component 02.218, Driver 01.00, CPU db: 3.00.000
**     Compiler    : CodeWarrior HCS08 C Compiler
**     Date/Time   : 2015-02-07, 00:53, # CodeGen: 9
**     Abstract    :
**         This device "IntEEPROM" implements internal EEPROM
**     Settings    :
**         Virtual page size           : 10 byte
**         Initialization:
**              Wait in methods        : Enabled
**              EEPROM clock           : 1000 kHz
**
**     Contents    :
**         SetByte     - byte EEPROM_SetByte(EEPROM_TAddress Addr, byte Data);
**         GetByte     - byte EEPROM_GetByte(EEPROM_TAddress Addr, byte *Data);
**         SetBytePage - byte EEPROM_SetBytePage(word Index, byte Data);
**         GetBytePage - byte EEPROM_GetBytePage(word Index, byte *Data);
**         SetPage     - byte EEPROM_SetPage(EEPROM_TAddress Addr);
**         GetPage     - byte EEPROM_GetPage(EEPROM_TAddress Addr);
**
**     Copyright : 1997 - 2014 Freescale Semiconductor, Inc. 
**     All Rights Reserved.
**     
**     Redistribution and use in source and binary forms, with or without modification,
**     are permitted provided that the following conditions are met:
**     
**     o Redistributions of source code must retain the above copyright notice, this list
**       of conditions and the following disclaimer.
**     
**     o Redistributions in binary form must reproduce the above copyright notice, this
**       list of conditions and the following disclaimer in the documentation and/or
**       other materials provided with the distribution.
**     
**     o Neither the name of Freescale Semiconductor, Inc. nor the names of its
**       contributors may be used to endorse or promote products derived from this
**       software without specific prior written permission.
**     
**     THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
**     ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
**     WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
**     DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
**     ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
**     LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
**     ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
**     (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
**     SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**     
**     http: www.freescale.com
**     mail: support@freescale.com
** ###################################################################*/
/*!
** @file EEPROM.h
** @version 01.00
** @brief
**         This device "IntEEPROM" implements internal EEPROM
*/         
/*!
**  @addtogroup EEPROM_module EEPROM module documentation
**  @{
*/         

#ifndef __EEPROM
#define __EEPROM

/* MODULE EEPROM. */

#include "Cpu.h"


#ifndef __BWUserType_EEPROM_TAddress
#define __BWUserType_EEPROM_TAddress
  /* User type for addressing of the EEPROM. Actual type depends on the CPU family. */
  typedef byte * EEPROM_TAddress;      /* Type of address to the EEPROM */
#endif

/* EEPROM area start address (in the format used by component methods). */
#define EEPROM_AREA_START               ((EEPROM_TAddress)0x3100UL)
#define EEPROM_AREA_START_INT           (0x3100UL)
/* EEPROM area last address (in the format used by component methods). */
#define EEPROM_AREA_END                 ((EEPROM_TAddress)0x31FFUL)
#define EEPROM_AREA_END_INT             (0x31FFUL)
/* EEPROM area size (in bytes). */
#define EEPROM_AREA_SIZE                0x0100U
/* EEPROM area sector size: minimal erasable unit (in bytes). */
#define EEPROM_AREA_SECTOR_SIZE         0x02U
/* EEPROM virtual page size (in bytes). */
#define EEPROM_VIRTUAL_PAGE_SIZE        0x0AU
/* TRUE if the component setting allows clear bits of already programmed flash memory location without destruction of the value in surrounding addresses by sector erase. */
#define EEPROM_ALLOW_CLEAR              (TRUE)
/* Size of programming phrase, i.e. number of bytes that must be programmed at once */
#define EEPROM_PROGRAMMING_PHRASE       (0x01U)

/* Flags parameter of OnError event can contain following error values (values may be OR-ed together) */
/* Double bit fault detect */
#define EEPROM_DOUBLE_FAULT             (0x02U)
/* Single bit fault detect */
#define EEPROM_SINGLE_FAULT             (0x01U)

byte EEPROM_SetByte(EEPROM_TAddress Addr,byte Data);
/*
** ===================================================================
**     Method      :  EEPROM_SetByte (component IntEEPROM)
**     Description :
**         This method writes a given byte to a specified address in
**         EEPROM. The method also sets address pointer for <SetActByte>
**         and <GetActByte> methods (applicable only if these methods
**         are enabled). The pointer is set to address passed as the
**         parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address to EEPROM
**         Data            - Data to write
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_SPEED - the component does not work
**                           in the active speed mode 
**                           - ERR_BUSY - device is busy 
**                           - ERR_VALUE - verification of written data
**                           failed (read value does not match with
**                           written value) 
**                           - ERR_NOTAVAIL - other device-specific
**                           error 
**                           - ERR_RANGE - parameter Addr is out of range
** ===================================================================
*/

byte EEPROM_GetByte(EEPROM_TAddress Addr,byte *Data);
/*
** ===================================================================
**     Method      :  EEPROM_GetByte (component IntEEPROM)
**     Description :
**         This method reads a byte from a specified EEPROM address.
**         The method also sets address pointer for <SetActByte> and
**         <GetActByte> methods (applicable only if these methods are
**         enabled). The pointer is set to address passed as the
**         parameter.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - EEPROM Address
**       * Data            - A pointer to the returned 8-bit data
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_BUSY - device is busy 
**                           - ERR_RANGE - parameter Addr is out of range
** ===================================================================
*/

byte EEPROM_SetBytePage(word Index,byte Data);
/*
** ===================================================================
**     Method      :  EEPROM_SetBytePage (component IntEEPROM)
**     Description :
**         This method writes a given byte to a virtual page.
**         This method is only available when the <Page size> property
**         is set to a non-zero size of the virtual page. The method
**         also sets index pointer for <SetActBytePage> and
**         <GetActBytePage> methods (applicable only if these methods
**         are enabled).
**     Parameters  :
**         NAME            - DESCRIPTION
**         Index           - Index to page within the range 0 to
**                           (<Page size> - 1)
**         Data            - Data to write
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_RANGE - parameter Index is out of
**                           range
** ===================================================================
*/

byte EEPROM_GetBytePage(word Index,byte *Data);
/*
** ===================================================================
**     Method      :  EEPROM_GetBytePage (component IntEEPROM)
**     Description :
**         This method reads a byte from a virtual page.
**         This method is only available when the <Page size> property
**         is set to a non-zero size of the virtual page. The method
**         also sets index pointer for <SetActBytePage> and
**         <GetActBytePage> methods (applicable only if these methods
**         are enabled).
**     Parameters  :
**         NAME            - DESCRIPTION
**         Index           - Index to page within the range 0 to
**                           (<Page size> - 1)
**       * Data            - A pointer to the returned 8-bit data
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_RANGE - parameter Index is out of
**                           range
** ===================================================================
*/

byte EEPROM_SetPage(EEPROM_TAddress Addr);
/*
** ===================================================================
**     Method      :  EEPROM_SetPage (component IntEEPROM)
**     Description :
**         This method writes the virtual page to EEPROM.
**         This method is enabled only if the <Page size> property is
**         set to a non-zero value. The method also sets address
**         pointer for <SetActByte> and <GetActByte> methods
**         (applicable only if these methods are enabled). The pointer
**         is set to address passed as the parameter + "Page size" - 1.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address in EEPROM
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_SPEED - the component does not work
**                           in the active speed mode 
**                           - ERR_BUSY - device is busy 
**                           - ERR_VALUE - source value is different
**                           from dest. value 
**                           - ERR_NOTAVAIL - other device-specific
**                           error 
**                           - ERR_RANGE - selected address out of the
**                           selected address range
** ===================================================================
*/

byte EEPROM_GetPage(EEPROM_TAddress Addr);
/*
** ===================================================================
**     Method      :  EEPROM_GetPage (component IntEEPROM)
**     Description :
**         This method reads a page at specified EEPROM address to the
**         virtual page in RAM.
**         This method is enabled only if the <Page size> property is
**         set to a non-zero value. The method also sets address
**         pointer for <SetActByte> and <GetActByte> methods
**         (applicable only if these methods are enabled). The pointer
**         is set to address passed as the parameter + "Page size" - 1.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Addr            - Address in EEPROM
**     Returns     :
**         ---             - Error code, possible codes: 
**                           - ERR_OK - OK 
**                           - ERR_BUSY - device is busy 
**                           - ERR_RANGE - selected address out of the
**                           selected address range
** ===================================================================
*/

void EEPROM_Init(void);
/*
** ===================================================================
**     Method      :  EEPROM_Init (component IntEEPROM)
**
**     Description :
**         Initializes the associated peripheral(s) and the component 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/


/* END EEPROM. */

#endif /* ifndef __EEPROM */
/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.3 [05.09]
**     for the Freescale HCS08 series of microcontrollers.
**
** ###################################################################
*/
