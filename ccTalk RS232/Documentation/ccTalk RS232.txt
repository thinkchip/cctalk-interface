=============================================================================
List of generated methods in project: main

THIS TEXT DESCRIPTION IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
=============================================================================

Module "AS_CCTALK" (component AsynchroSerial)
   - AS_CCTALK_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - AS_CCTALK_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) SendChar 
                method only stores data into an output buffer. In case of a zero output buffer size, only one character can be 
                stored. Enabling the component (Enable method) starts the transmission of the stored data. This method is 
                available only if the transmitter property is enabled.
   - AS_CCTALK_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - AS_CCTALK_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "FC_CCTALK" (component FreeCntr16)
   - FC_CCTALK_Reset -This method clears the counter.
   - FC_CCTALK_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last resetting 
                after the last reset.
   - FC_CCTALK_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last resetting 
                after the last reset.

Module "TI_CCTALK" (component TimerInt)

Module "WDOG"      (component WatchDog)
   - WDOG_Clear -Clears the watchdog timer (it makes the timer restart from zero).

Module "AS_DATABUS" (component AsynchroSerial)
   - AS_DATABUS_RecvChar -If any data is received, this method returns one character, otherwise it returns an error code (it 
                does not wait for data). This method is enabled only if the receiver property is enabled.  [Note:] Because the 
                preferred method to handle error and break exception in the interrupt mode is to use events <OnError> and 
                <OnBreak> the return value ERR_RXEMPTY has higher priority than other error codes. As a consequence the 
                information about an exception in interrupt mode is returned only if there is a valid character ready to be 
                read.
   - AS_DATABUS_SendChar -Sends one character to the channel. If the component is temporarily disabled (Disable method) 
                SendChar method only stores data into an output buffer. In case of a zero output buffer size, only one 
                character can be stored. Enabling the component (Enable method) starts the transmission of the stored data. 
                This method is available only if the transmitter property is enabled.
   - AS_DATABUS_GetCharsInRxBuf -Returns the number of characters in the input buffer. This method is available only if the 
                receiver property is enabled.
   - AS_DATABUS_GetCharsInTxBuf -Returns the number of characters in the output buffer. This method is available only if the 
                transmitter property is enabled.

Module "LED_RUN"   (component BitIO)
   - LED_RUN_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_RUN_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a memory 
                or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_RUN_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.
   - LED_RUN_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only if 
                the direction = _[output]_ or _[input/output]_.
   - LED_RUN_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is available 
                only if the direction = _[output]_ or _[input/output]_.

Module "LED_CCTALK" (component BitIO)
   - LED_CCTALK_GetVal -Returns the input/output value. If the direction is [input] then the input value of the pin is read and 
                returned. If the direction is [output] then the last written value is returned (see <Safe mode> property for 
                limitations). This method cannot be disabled if direction is [input].
   - LED_CCTALK_PutVal -The specified output value is set. If the direction is [input], the component saves the value to a 
                memory or a register and this value will be written to the pin after switching to the output mode (using 
                [SetDir(TRUE)]; see <Safe mode> property for limitations). If the direction is [output], it writes the value to 
                the pin. (Method is available only if the direction = _[output]_ or _[input/output]_).
   - LED_CCTALK_ClrVal -Clears (set to zero) the output value. It is equivalent to the [PutVal(FALSE)]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.
   - LED_CCTALK_SetVal -Sets (to one) the output value. It is equivalent to the [PutVal(TRUE)]. This method is available only 
                if the direction = _[output]_ or _[input/output]_.
   - LED_CCTALK_NegVal -Negates (inverts) the output value. It is equivalent to the [PutVal(!GetVal())]. This method is 
                available only if the direction = _[output]_ or _[input/output]_.

Module "FC_DATABUS" (component FreeCntr16)
   - FC_DATABUS_Enable -This method enables the component - the internal clocks are counted.
   - FC_DATABUS_Disable -This method disables the component - the internal clocks are not counted.
   - FC_DATABUS_Reset -This method clears the counter.
   - FC_DATABUS_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last resetting 
                after the last reset.
   - FC_DATABUS_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last resetting 
                after the last reset.
   - FC_DATABUS_GetTimeSec -This method returns the time (as a 16-bit unsigned integer) in seconds since the last resetting 
                after the last reset.

Module "TI_LEDS"   (component TimerInt)

Module "EEPROM"    (component IntEEPROM)
   - EEPROM_SetByte -This method writes a given byte to a specified address in EEPROM. The method also sets address pointer for 
                <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer is set to 
                address passed as the parameter.
   - EEPROM_GetByte -This method reads a byte from a specified EEPROM address. The method also sets address pointer for 
                <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer is set to 
                address passed as the parameter.
   - EEPROM_SetBytePage -This method writes a given byte to a virtual page.  This method is only available when the <Page size> 
                property is set to a non-zero size of the virtual page. The method also sets index pointer for <SetActBytePage> 
                and <GetActBytePage> methods (applicable only if these methods are enabled).
   - EEPROM_GetBytePage -This method reads a byte from a virtual page.  This method is only available when the <Page size> 
                property is set to a non-zero size of the virtual page. The method also sets index pointer for <SetActBytePage> 
                and <GetActBytePage> methods (applicable only if these methods are enabled).
   - EEPROM_SetPage -This method writes the virtual page to EEPROM.  This method is enabled only if the <Page size> property is 
                set to a non-zero value. The method also sets address pointer for <SetActByte> and <GetActByte> methods 
                (applicable only if these methods are enabled). The pointer is set to address passed as the parameter + "Page 
                size" - 1.
   - EEPROM_GetPage -This method reads a page at specified EEPROM address to the virtual page in RAM.  This method is enabled 
                only if the <Page size> property is set to a non-zero value. The method also sets address pointer for 
                <SetActByte> and <GetActByte> methods (applicable only if these methods are enabled). The pointer is set to 
                address passed as the parameter + "Page size" - 1.

Module "UTIL"      (component Utility)
   - UTIL_strcpy -Same as normal strcpy, but safe as it does not write beyond the buffer.
   - UTIL_strcat -Same as normal strcat, but safe as it does not write beyond the buffer.
   - UTIL_chcat -Adds a single character to a zero byte terminated buffer. It cares about buffer overflow.
   - UTIL_Num8sToStr -Converts a signed 8bit value into a string.
   - UTIL_Num8uToStr -Converts an unsigned 8bit value into a string.
   - UTIL_Num16sToStr -Converts a signed 16bit value into a string.
   - UTIL_Num16uToStr -Converts a signed 16bit value into a string.
   - UTIL_Num32uToStr -Converts an unsigned 32bit value into a string.
   - UTIL_Num32sToStr -Converts a signed 32bit value into a string.
   - UTIL_Num16sToStrFormatted -Converts a 16bit signed value to string.
   - UTIL_Num16uToStrFormatted -Converts a 16bit unsigned value to string.
   - UTIL_Num32uToStrFormatted -Converts a 32bit unsigned value to string.
   - UTIL_Num32sToStrFormatted -Converts a 32bit signed value to string.
   - UTIL_strcatNum8u -Appends a 8bit unsigned value to a string buffer.
   - UTIL_strcatNum8s -Appends a 8bit signed value to a string buffer.
   - UTIL_strcatNum16u -Appends a 16bit unsigned value to a string buffer.
   - UTIL_strcatNum16s -Appends a 16bit signed value to a string buffer.
   - UTIL_strcatNum32u -Appends a 32bit signed value to a string buffer.
   - UTIL_strcatNum32s -Appends a 32bit signed value to a string buffer.
   - UTIL_strcatNum16uFormatted -Appends a 16bit unsigned value to a string buffer in a formatted way.
   - UTIL_strcatNum16sFormatted -Appends a 16bit signed value to a string buffer in a formatted way.
   - UTIL_strcatNum32uFormatted -Appends a 32bit unsigned value to a string buffer in a formatted way.
   - UTIL_strcatNum32sFormatted -Appends a 32bit signed value to a string buffer in a formatted way.
   - UTIL_strcatNum8Hex -Appends a 8bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL_strcatNum16Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL_strcatNum24Hex -Appends a 32bit unsigned value to a buffer as hex number (without a 0x prefix). Only 24bits are used.
   - UTIL_strcatNum32Hex -Appends a 16bit unsigned value to a buffer as hex number (without a 0x prefix).
   - UTIL_strcatNum32sDotValue100 -Appends a 32bit signed value to a buffer. The value is in 1/100 units.  For example for the 
                value -13456 it will append the string "-134.56"
   - UTIL_IsLeapYear -Returns true if a given year is a leap year
   - UTIL_WeekDay -Returns the weekday for a given date >= 1.Jan.1900
   - UTIL_ReadEscapedName -Scans an escaped name from a string. This is useful e.g. for double quoted file names.
   - UTIL_xatoi -Custom atoi() (ascii to int) implementation by Elm Chan
   - UTIL_ScanDate -Scans a date in the format "dd.mm.yyyy" or "dd-mm-yyyy". For yy it will expand it to 20yy.
   - UTIL_ScanTime -Scans a time string in the format "hh:mm:ss,hh" with the part for the ",hh" is optional.
   - UTIL_ScanDecimal8uNumber -Scans a decimal 8bit unsigned number
   - UTIL_ScanDecimal8sNumber -Scans a decimal 8bit signed number
   - UTIL_ScanDecimal16uNumber -Scans a decimal 16bit unsigned number
   - UTIL_ScanDecimal16sNumber -Scans a decimal 16bit signed number
   - UTIL_ScanDecimal32uNumber -Scans a decimal 32bit unsigned number
   - UTIL_ScanDecimal32sNumber -Scans a decimal 32bit signed number
   - UTIL_ScanHex8uNumber -Scans a hexadecimal 8bit number, starting with 0x
   - UTIL_ScanHex8uNumberNoPrefix -Scans a hexadecimal 8bit number, without 0x
   - UTIL_ScanHex16uNumber -Scans a hexadecimal 16bit number, starting with 0x
   - UTIL_ScanHex32uNumber -Scans a hexadecimal 32bit number, starting with 0x
   - UTIL_ScanSeparatedNumbers -Scans multiple numbers separated by character, e.g. "123.68.5.3"
   - UTIL_strcmp -Wrapper to the standard strcmp() routine
   - UTIL_strncmp -Wrapper to the standard strncmp() routine
   - UTIL_strFind -Searches a substring inside a string and returns the position.
   - UTIL_strtailcmp -Compares the tail of a string and returns 0 if it matches, 1 otherwise
   - UTIL_strlen -Wrapper to the standard strlen() function.
   - UTIL_strCutTail -Removes a tailing substring from a string. The string passed will be modified (the tail is cut by writing 
                a zero byte to the string!)

Module "FC_HOPPER" (component FreeCntr16)
   - FC_HOPPER_Reset -This method clears the counter.
   - FC_HOPPER_GetTimeUS -This method returns the time (as a 16-bit unsigned integer) in microseconds since the last resetting 
                after the last reset.
   - FC_HOPPER_GetTimeMS -This method returns the time (as a 16-bit unsigned integer) in milliseconds since the last resetting 
                after the last reset.

Module "Cpu"       (component MC9S08PA16_32)
   - Cpu_EnableInt -Enables maskable interrupts
   - Cpu_DisableInt -Disables maskable interrupts
   - Cpu_Delay100US -This method realizes software delay. The length of delay is at least 100 microsecond multiply input 
                parameter [us100]. As the delay implementation is not based on real clock, the delay time may be increased by 
                interrupt service routines processed during the delay. The method is independent on selected speed mode.

===================================================================================
